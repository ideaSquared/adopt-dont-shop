# Turborepo-optimized Dockerfile for monorepo
FROM node:18-slim AS base

# Install dependencies only when needed
RUN apt-get update && apt-get install -y \
    git \
    python3 \
    make \
    g++ \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Install turbo globally
RUN npm install -g turbo

# Copy root package files
COPY package*.json ./
COPY turbo.json ./

# Copy all workspace package.json files for better caching
COPY app.admin/package*.json ./app.admin/
COPY app.client/package*.json ./app.client/
COPY app.rescue/package*.json ./app.rescue/
COPY lib.components/package*.json ./lib.components/
COPY service.backend/package*.json ./service.backend/

# Install dependencies
RUN npm install

# Development stage
FROM base AS development

# Copy source code
COPY . .

# Set working directory to app
WORKDIR /app

# Expose common ports
EXPOSE 3000 3001 3002 5000

# Default command - will be overridden by docker-compose
CMD ["npm", "run", "dev"]

# Build stage
FROM base AS build

# Accept build argument for which app to build
ARG TURBO_FILTER

# Copy source code
COPY . .

# Build the project using turbo with filter
RUN if [ -n "$TURBO_FILTER" ]; then \
      turbo run build --filter=$TURBO_FILTER; \
    else \
      turbo run build; \
    fi

# Production stage
FROM nginx:alpine AS production

# Accept build argument for which app to serve
ARG APP_NAME=app-admin

# Copy built files from build stage
COPY --from=build /app/${APP_NAME}/dist /usr/share/nginx/html

# Copy nginx configuration if needed
# COPY nginx.conf /etc/nginx/nginx.conf

EXPOSE 80

CMD ["nginx", "-g", "daemon off;"]
